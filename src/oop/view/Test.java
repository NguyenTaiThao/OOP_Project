/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oop.view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import oop.model.Account;
import oop.model.History;
import oop.model.TestLesson;
import oop.service.StatisticService;
import oop.service.TestService;
import static oop.utils.Utils.setTextForLabel;
/**
 *
 * @author thao
 */
public class Test extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    private static TestLesson testlesson;
    private static Account acc;
    private static int currentLine;
    private static int currentWordInLine;
    private static boolean changeLine;
    private static Thread t;
    private static Thread t2;
    private static String successString;
    private static Date time;
    private static boolean stop;
    private static int interval;
    public Test(TestLesson testLesson, Account acc) {
        Test.testlesson = testLesson;
        Test.interval = testLesson.getLevel() < 3 ? 15000 : 25000;
        Test.acc = acc;
        initComponents();
        //set window ra giua screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        this.setResizable(false);
        setTextForLabel(this.TestNameLabel, testlesson.getName());
        setTextForLabel(this.ProgressLabel, "00:00");
        setTextForLabel(this.TimerLabel, "/ "+testlesson.getLength()/60 + ":" + testlesson.getLength()%60);
        Test.currentLine = 0;
        Test.currentWordInLine = 0;
        Test.changeLine = false;
        Test.successString = "";
        Test.stop = false;
        if(Test.t2 != null) {
            Test.stop = true;
            Test.t2.stop();
        }
        if(Test.t != null) {
            Test.stop = true;
            Test.t.stop();
        }
        Test.t2 = null;
        Test.t = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ResultPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ResultTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        ExtensionButtonPanel = new javax.swing.JPanel();
        StopButton = new javax.swing.JButton();
        SkipButton = new javax.swing.JButton();
        StartButton = new javax.swing.JButton();
        HintButton = new javax.swing.JButton();
        TimerLabel = new javax.swing.JLabel();
        ProgressLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserInputTextArea = new javax.swing.JTextArea();
        TestNameLabel = new javax.swing.JLabel();

        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ResultPanel.setBackground(new java.awt.Color(255, 255, 255));
        ResultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Result"));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        ResultTextArea.setColumns(20);
        ResultTextArea.setLineWrap(true);
        ResultTextArea.setRows(5);
        jScrollPane2.setViewportView(ResultTextArea);

        javax.swing.GroupLayout ResultPanelLayout = new javax.swing.GroupLayout(ResultPanel);
        ResultPanel.setLayout(ResultPanelLayout);
        ResultPanelLayout.setHorizontalGroup(
            ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1044, Short.MAX_VALUE)
        );
        ResultPanelLayout.setVerticalGroup(
            ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        ExtensionButtonPanel.setBackground(new java.awt.Color(255, 255, 255));

        StopButton.setBackground(new java.awt.Color(45, 118, 232));
        StopButton.setForeground(new java.awt.Color(255, 255, 255));
        StopButton.setText("Stop");
        StopButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        SkipButton.setBackground(new java.awt.Color(45, 118, 232));
        SkipButton.setForeground(new java.awt.Color(255, 255, 255));
        SkipButton.setText("Skip");
        SkipButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SkipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SkipButtonActionPerformed(evt);
            }
        });

        StartButton.setBackground(new java.awt.Color(45, 118, 232));
        StartButton.setForeground(new java.awt.Color(255, 255, 255));
        StartButton.setText("Start");
        StartButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        HintButton.setBackground(new java.awt.Color(45, 118, 232));
        HintButton.setForeground(new java.awt.Color(255, 255, 255));
        HintButton.setText("Hint");
        HintButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        HintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HintButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ExtensionButtonPanelLayout = new javax.swing.GroupLayout(ExtensionButtonPanel);
        ExtensionButtonPanel.setLayout(ExtensionButtonPanelLayout);
        ExtensionButtonPanelLayout.setHorizontalGroup(
            ExtensionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExtensionButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(StopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SkipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(HintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(175, Short.MAX_VALUE))
        );
        ExtensionButtonPanelLayout.setVerticalGroup(
            ExtensionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(StopButton, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
            .addComponent(SkipButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(StartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(HintButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        TimerLabel.setBackground(new java.awt.Color(255, 255, 255));
        TimerLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        TimerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TimerLabel.setText("15:03");
        TimerLabel.setToolTipText("Timer");
        TimerLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        TimerLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        TimerLabel.setOpaque(true);

        ProgressLabel.setBackground(new java.awt.Color(255, 255, 255));
        ProgressLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ProgressLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ProgressLabel.setText("00:00");
        ProgressLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        UserInputTextArea.setColumns(20);
        UserInputTextArea.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        UserInputTextArea.setLineWrap(true);
        UserInputTextArea.setRows(5);
        UserInputTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "User input"));
        UserInputTextArea.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                UserInputTextAreaInputMethodTextChanged(evt);
            }
        });
        UserInputTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                UserInputTextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(UserInputTextArea);

        TestNameLabel.setBackground(new java.awt.Color(45, 118, 232));
        TestNameLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        TestNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        TestNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TestNameLabel.setText("Test 1");
        TestNameLabel.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ExtensionButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(133, 133, 133)
                        .addComponent(ProgressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TimerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addComponent(TestNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TestNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(240, 240, 240)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TimerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ProgressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ExtensionButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ResultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(ResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(403, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        Test.testlesson.setPlayCompleted(true);
        Test.t2.interrupt();
        Test.stop = true;
    }//GEN-LAST:event_StopButtonActionPerformed

    private void SkipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkipButtonActionPerformed
       if(Test.t2 == null)   return;
       Test.changeLine = true;
       Test.t2.interrupt();
    }//GEN-LAST:event_SkipButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Test.testlesson.setPlayCompleted(true);
    }//GEN-LAST:event_formWindowClosing

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        System.out.println(Test.t);
        System.out.println(Test.t2);
        
        if(Test.t != null || Test.t2 != null) return;
        Test.stop = false;
        Test.time = new Date();
        System.out.println(Test.time);
        Test.t = new Thread(new Runnable(){
            @Override
            public void run(){
                Test.testlesson.setPlayCompleted(false);
                Test.testlesson.play(Test.testlesson.getMp3Url());
                Test.t = null;
            }
        });
        Test.t.start();
        
        Test.t2 = new Thread(new Runnable(){
            @Override
            public void run(){
                long t_ = 15000;
                for(int i = 0; i < Test.testlesson.getScript().size(); i++){
                    while(true){
                        try {
                            if(Test.testlesson.getAudioClip() != null){
                                t_ = (Test.testlesson.getAudioClip().getMicrosecondLength() - Test.testlesson.getAudioClip().getMicrosecondPosition())/1000;
                                t_ = t_ <  15000 ? t_-1000 :  15000;
                                System.out.println(t_);
                            }
                            Thread.sleep(t_);
                            Test.testlesson.getAudioClip().setMicrosecondPosition(15000000*Test.currentLine);
                        } catch (InterruptedException ex) {
                            if(Test.changeLine && Test.currentLine < Test.testlesson.getScript().size() - 1){
                                Test.currentLine++; 
                                Test.currentWordInLine = 0;
                                Test.changeLine = false;
                                Test.testlesson.getAudioClip().setMicrosecondPosition(15000000*Test.currentLine);
                                break;
                            }else{
                                //reset global variable
                                if(Test.t != null)
                                    Test.t.interrupt();
                                
                                Test.testlesson.setPlayCompleted(true);
                                Test.currentLine = 0;
                                Test.currentWordInLine = 0;
                                Test.changeLine = false;
                                
                                // caculate score
                                if(!Test.stop){
                                    Date cur = new Date();
                                    float time = (cur.getTime() - Test.time.getTime())/1000;
                                    System.out.println(time);
                                    float score = 10*(11 - (float)time/Test.testlesson.getLength());
                                    if(score < 0)   score = -1 * score;
                                    if(score > 100) score = 100;
                                    Test.saveHistory(score, time);
                                    JOptionPane.showMessageDialog(Test.this,"You finished the test with " + score,"Good jobs", JOptionPane.OK_OPTION);
                                    StatisticService ts = new StatisticService();
                                    ts.createAvgScoreForDay(Test.acc.getUser().getId());
                                }else{
                                    Test.stop = false;
                                }
                                if(Test.t2 != null){
                                    System.out.println("reset t2");
                                    Thread tmp = Test.t2;
                                    Test.t2 = null;
                                    Test.stop = true;
                                    tmp.stop();
                                }
                                
                                }
                            }
                        }    
                    }
                }
        });
        t2.start();
        
        Thread t3 = new Thread(new Runnable(){
            @Override
            public void run(){
                while(true){
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if(Test.testlesson.getAudioClip() != null){
                        long second = Test.testlesson.getAudioClip().getMicrosecondPosition()/1000000;
                        String str = second/60 + ":" + second%60;
                        setTextForLabel(ProgressLabel, str);
                    }
                }
            }
        });
        
        t3.start();
    }//GEN-LAST:event_StartButtonActionPerformed
    private static void saveHistory(float score, float time){
        History history = new History(Test.acc.getUser().getId(), Test.testlesson.getId(), score, time);
        System.out.println(history.getTime());
        TestService testService = new TestService();
        testService.saveHistory(history);
        StatisticService st = new StatisticService();
        st.calculateAvgScore(Test.acc.getUser().getId());
    }
    private void UserInputTextAreaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_UserInputTextAreaInputMethodTextChanged
//        System.out.println(this.UserInputTextArea.getText());
    }//GEN-LAST:event_UserInputTextAreaInputMethodTextChanged

    private void UserInputTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UserInputTextAreaKeyTyped
        String specialCharacters=" !#$%&'()*+,-./:;<=>?@[]^_`{|}";
        boolean flag = false;
        String enteredString = this.UserInputTextArea.getText();
        String currentWord = Test.testlesson.getScript().get(Test.currentLine)[Test.currentWordInLine];

        if(specialCharacters.contains(currentWord)){
            flag = true;
        }
        if(currentWord.toLowerCase().startsWith(enteredString.toLowerCase()) || flag){
            if(enteredString.toLowerCase().equals(currentWord.toLowerCase()) || flag){
                System.out.println(currentWord + " ");
                if(Test.currentWordInLine < Test.testlesson.getScript().get(Test.currentLine).length - 1)
                    Test.currentWordInLine++;
                else{
                    if(Test.t2 != null){
                        Test.changeLine = true;
                        Test.t2.interrupt();
                    }else{
                        Test.currentLine++;
                        Test.currentWordInLine = 0;
                    }
                }
                this.UserInputTextArea.setText("");
                Test.successString += currentWord + " ";
                this.ResultTextArea.setText(Test.successString);
                flag = false;
            }
        }else{
            this.UserInputTextArea.setText(enteredString.substring(0, enteredString.length()-1));
        }
    }//GEN-LAST:event_UserInputTextAreaKeyTyped

    private void HintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HintButtonActionPerformed
        String currentWord = Test.testlesson.getScript().get(Test.currentLine)[Test.currentWordInLine];
        if(Test.testlesson.getHint().contains(currentWord)){
            if(Test.currentWordInLine < Test.testlesson.getScript().get(Test.currentLine).length - 1)
                    Test.currentWordInLine++;
                else{
                    if(Test.t2 != null){
                        Test.changeLine = true;
                        Test.t2.interrupt();
                    }else{
                        Test.currentLine++;
                        Test.currentWordInLine = 0;
                    }
                }
                this.UserInputTextArea.setText("");
                Test.successString += currentWord + " ";
                this.ResultTextArea.setText(Test.successString);
        }
    }//GEN-LAST:event_HintButtonActionPerformed
    
    private void printLine(int index){
        String[] arr = Test.testlesson.getScript().get(Test.currentLine);
        for(int i = 0; i < arr.length; i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ExtensionButtonPanel;
    private javax.swing.JButton HintButton;
    private javax.swing.JLabel ProgressLabel;
    private javax.swing.JPanel ResultPanel;
    private javax.swing.JTextArea ResultTextArea;
    private javax.swing.JButton SkipButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JLabel TestNameLabel;
    private javax.swing.JLabel TimerLabel;
    private javax.swing.JTextArea UserInputTextArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void If(boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
